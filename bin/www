#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dotenv = require('dotenv').config();
const fs = require('fs');
let app = require('../app');
const path = require('path');
let debug = require('debug')('seo_back:server');
let http = require('http');
let https = require('https');

process.env.NODE_ENV =
  process.env.NODE_ENV &&
  process.env.NODE_ENV.trim().toLowerCase() == 'production'
    ? 'production'
    : 'development';

/**
 * Get port from environment and store in Express.
 */

/**
 * Create HTTP server.
 */

/**
 * Get port from environment and store in Express.
 */
let option;
let server;
let port;
if (process.env.NODE_ENV === 'production') {
  port = normalizePort(process.env.PORT || '3032');
  option = {
    ca: fs.readFileSync('/etc/letsencrypt/live/www.westkite.dev/fullchain.pem'),
    key: fs
      .readFileSync(
        path.resolve(
          process.cwd(),
          '/etc/letsencrypt/live/www.westkite.dev/privkey.pem'
        ),
        'utf8'
      )
      .toString(),
    cert: fs
      .readFileSync(
        path.resolve(
          process.cwd(),
          '/etc/letsencrypt/live/www.westkite.dev/cert.pem'
        ),
        'utf8'
      )
      .toString()
  };
  server = https.createServer(option, app);
} else {
  port = normalizePort(process.env.PORT || '3032');
  server = http.createServer(app);
}

app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
